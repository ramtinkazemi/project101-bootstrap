AWSTemplateFormatVersion: '2010-09-09'
Description: Bootstrap template for bootstrap AWS Account

Resources:

  GitHubOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: 'https://token.actions.githubusercontent.com'
      ClientIdList:
        - 'sts.amazonaws.com'
      ThumbprintList:
        - '1b511abead59c6ce207077c0bf0e0043b1382612'

  TerraformStateBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub terraform-state-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  TerraformStateLockTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub terraform-lock-${AWS::AccountId}-${AWS::Region}
      AttributeDefinitions:
        - AttributeName: LockID
          AttributeType: S
      KeySchema:
        - AttributeName: LockID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true

  BlueprintsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub github-action-blueprints-role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
                token.actions.githubusercontent.com:sub: [
                  !Sub "repo:{{github_blueprints_repo}}:ref:refs/heads/main",
                  !Sub "repo:{{github_blueprints_repo}}:pull_request",
                ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  InfraRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub github-action-infra-role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
                token.actions.githubusercontent.com:sub: [
                  !Sub "repo:{{github_infra_repo}}:ref:refs/heads/main",
                  !Sub "repo:{{github_infra_repo}}:pull_request",
                ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub github-action-app-role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
                token.actions.githubusercontent.com:sub: [
                  !Sub "repo:{{github_app_repo}}:ref:refs/heads/main",
                  !Sub "repo:{{github_app_repo}}:pull_request",
                ]
      Policies:
        - PolicyName: EKSFullAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - "eks:*"
                  - "ec2:Describe*"
                  - "ec2:ModifyInstanceAttribute"
                  - "ec2:RebootInstances"
                Resource: "*"
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "s3:*"
                Resource: !Sub arn:aws:s3:::app-resources-${AWS::AccountId}-${AWS::Region}/*

  BootstrapLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "BootstrapLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "*"
                Resource: "*"

  BootstrapLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Role: !GetAtt BootstrapLambdaExecutionRole.Arn
      Runtime: "python3.8"
      Environment:
        Variables:
          AWS_ACCOUNT_ID: !Ref 'AWS::AccountId'
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Event: {event}")
              try:
                  if event['RequestType'] == 'Create':
                    pass
                  elif event['RequestType'] == 'Update':
                      pass

                  elif event['RequestType'] == 'Delete':
                      pass
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  logger.error(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  BlueprintsRoleArnParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/facts/v1/blueprints-role-arn'
      Type: String
      Value: !GetAtt BlueprintsRole.Arn

  InfraRoleArnParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/facts/v1/infra-role-arn'
      Type: String
      Value: !GetAtt InfraRole.Arn

  AppRoleArnParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/facts/v1/app-role-arn'
      Type: String
      Value: !GetAtt AppRole.Arn

  TerraformStateBucketNameParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/facts/v1/terraform-state-bucket-name'
      Type: String
      Value: !Ref TerraformStateBucket

  TerraformStateLockTableNameParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/facts/v1/terraform-state-lock-table-name'
      Type: String
      Value: !Ref TerraformStateLockTable

Outputs:
  BlueprintsRoleArn:
    Description: "ARN of the Blueprints Role for GitHub Actions"
    Value: !GetAtt BlueprintsRole.Arn

  InfraRoleArn:
    Description: "ARN of the Infra Role for GitHub Actions"
    Value: !GetAtt InfraRole.Arn

  AppRoleArn:
    Description: "ARN of the Application Role for GitHub Actions"
    Value: !GetAtt AppRole.Arn

  TerraformStateBucketName:
    Description: "S3 Bucket for Terraform State"
    Value: !Ref TerraformStateBucket

  TerraformStateLockTableName:
    Description: "DynamoDB Table for Terraform State Lock"
    Value: !Ref TerraformStateLockTable
